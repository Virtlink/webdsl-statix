module static-semantics/ui/attributes

imports
  static-semantics/types/built-ins

  static-semantics/webdsl-types
  static-semantics/webdsl

signature
  relations
    attributeCollection : string

rules // attribute collection declaration and resolving

  declareAttributeCollection : scope * string
  declareAttributeCollection(s, c) :-
    !attributeCollection[c] in s,
    resolveAttributeCollection(s, c) == [_] | error $[Attribute collection with name [c] is defined multiple times. Use "override" modifier to replace existing attribute collections]. // correct error message for tests

  resolveAttributeCollection : scope * string -> list((path * string))
  resolveAttributeCollection(s, c) = ps :-
    query attributeCollection
      filter P* F* ((EXTEND? INHERIT*) | (DEF? (IMPORT | IMPORTLIB)?))
      and { c' :- c' == c }
      in s |-> ps.

rules // attributes

  attributesOk maps attributeOk(*, list(*))
  attributeOk : scope * Attribute
  attributeOk(s, a@AttributeSelection2Attribute(_)) :- try { false } | warning $[This UI attribute is not implemented yet] @a.
  attributeOk(s, AttributeExpandLocal(_, _, _)) :- try { false } | warning $[This UI attribute is not implemented yet].

  attributeOk(s, Attribute(_, exp)) :- typed(s, exp).
  attributeOk(s, XMLAttributesIf(c, attributes)) :-
    equalType(typeOfExp(s, c), bool(s)) | error $[Condition should be of type bool] @c,
    attributesOk(s, attributes).

  attributeOk(s, XMLAttributesIfElse(c, attributes_if, attributes_else)) :-
    equalType(typeOfExp(s, c), bool(s)) | error $[Condition should be of type bool] @c,
    attributesOk(s, attributes_if),
    attributesOk(s, attributes_else).

  attributeOk(s, CommonAttribute2Attribute(ca)) :- commonAttributeOk(s, ca).

  commonAttributeOk : scope * CommonAttribute
  commonAttributeOk(s, AllAttributes()).
  commonAttributeOk(s, AllAttributesExceptExp(exp)) :- {t}
    t == typeOfExp(s, exp),
    or(
      typeCompatibleB(string(s), t),
      orB(
        typeCompatibleB(LIST(string(s)), t),
        typeCompatibleB(SET(string(s)), t)
      )
    ) | error $[Attribute names should be of type String, List of String of Set of String, but type [t] given] @exp.

  commonAttributeOk(s, AttributesExp(exp)) :- {t}
    t == typeOfExp(s, exp),
    or(
      typeCompatibleB(string(s), t),
      orB(
        typeCompatibleB(LIST(string(s)), t),
        typeCompatibleB(SET(string(s)), t)
      )
    ) | error $[Attribute names should be of type String, List of String of Set of String, but type [t] given] @exp.

rules // attribute collections

  defOk(s, AttributeCollection(AttributeCollectionOverrideNone(), c, attrs)) :-
    declareAttributeCollection(s, c).

  defOk(s, AttributeCollection(AttributeCollectionOverride(), c, attrs)) :- {c'}
    resolveAttributeCollection(s, c) == [(_, c')] | error $[Attribute collection with name [c] not defined] @c, // correct error message for tests
    @c.ref := c'.
